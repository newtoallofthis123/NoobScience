---
const posts = await Astro.glob('../../*/*/*.mdx');
let { term } = Astro.params;
term = term?.toLowerCase();
term = term?.split(' ').join('');

let recommend_posts = [];

const site_urls = {
    "about": "/about",
    "contact": "/contact",
    "projects": "/projects",
    "blog": "/writes",
    "writing": "/writes",
    "posts": "/writes",
    "home": "/",
}

//@ts-ignore
if (term in site_urls) {
    recommend_posts.push({
        "frontmatter": {
            "title": "" + term?.slice(0, 1).toUpperCase() + term?.slice(1) + " Page",
            "description": "Go to the " + term + " page",
            "tags": [term],
            "category": term,
            "draft": false,
            "date": new Date().toISOString(),
        },
//@ts-ignore
        "url": site_urls[term || "/"],
    });
}

// Second Level Check the title
for (const post of posts) {
    if (
        post.frontmatter.title
            ?.toLowerCase()
            ?.split(' ')
            .join('')
            .includes(term)
    ) {
        // @ts-ignore

        recommend_posts.push(post);
    }
}

// First Level Check the tags
for (const post of posts) {
    if (post.frontmatter.tags.includes(term)) {
        // @ts-ignore
        recommend_posts.push(post);
    }
}

// Third Level Check the description
for (const post of posts) {
    if (
        post.frontmatter.description
            ?.toLowerCase()
            ?.split(' ')
            .join('')
            .replace(/[-.,]/g, '')
            .includes(term)
    ) {
        // @ts-ignore
        recommend_posts.push(post);
    }
}

// Check the Category
for (const post of posts) {
    if (post.frontmatter.category?.toLowerCase() == term?.toLowerCase()) {
        // @ts-ignore
        recommend_posts.push(post);
    }
}

// Fourth level tags

for (const post of posts) {
    for (const tag of post.frontmatter.tags) {
        if (tag.toLowerCase().includes(term)) {
        // @ts-ignore
            recommend_posts.push(post);
        }
    }
}

// Remove Drafts
// @ts-ignore
recommend_posts = recommend_posts.filter((post) => !post.frontmatter.draft);

// Remove the duplicates
recommend_posts = [...new Set(recommend_posts)];

return new Response(JSON.stringify(recommend_posts), {
    headers: {
        'content-type': 'application/json;charset=UTF-8',
    },
});
---
